<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring</title>
    <url>https://cosher.gitee.io/blog/2020/03/05/Spring/%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h3 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h3><p>Spring 是于 2003 年兴起的一个轻量级的Java 开发框架，创始人是Rod Johnson，它是为了解决企业应用开发的复杂性而创建的，随着时代的发展，spring旗下发展了很多项目，并且越来越多的开发者开始使用这些项目。spring的优点如下：</p>
<ul>
<li>方便解耦，简化开发（高内聚低耦合），可以将对象依赖关系的维护交给Spring管理。</li>
<li>IOC（Inversion of Control）控制反转，对象的创建由spring完成，并将创建好的对象注入给使用者。</li>
<li>AOP（Aspect Orient Programming）编程的支持，面向切面编程，可以将一些日志，事务等操作从业务逻辑的代码中抽取出来，这样子业务逻辑代码就更加纯净了，并且可以增强日志和事务复用性。</li>
<li>声明式事务的支持，只需要通过配置就可以完成对事务的管理，而无需手动编程。</li>
<li>方便集成各种优秀框架，其内部提供了对很多优秀框架（如：Struts、Hibernate、MyBatis等）的直接支持。</li>
<li>非侵入式，spring的api不会在业务逻辑的代码中出现，倘若有一天项目不使用spring了，那么可以很方便的移植到其他框架上。</li>
</ul>
<h3 id="第一个spring程序"><a href="#第一个spring程序" class="headerlink" title="第一个spring程序"></a>第一个spring程序</h3><p><strong>添加依赖jar包</strong><br>咱们这里使用spring 5.x的版本，要使用该版本的话，需要保证你的jdk是8以上。</p>
<p>要想使用spring框架的话，需要添加相关的jar包，在你的pom.xml文件中添加下面依赖即可：</p>
<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;/groupId&gt;
    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
    &lt;version&gt;5.0.4.RELEASE&lt;/version&gt;
&lt;/dependency&gt;</code></pre><p>添加上面依赖之后，maven会将spring相关的一系列jar包下载到你的本地maven仓库中，这里会用到junit，所以不要把junit的依赖删除。</p>
<p><strong>创建接口和实现类</strong></p>
<p>创建一个接口和该接口的实现类：</p>
<pre><code>package com.monkey1024.service;

public interface StudentService {

    void study();
}</code></pre><p>实现类：</p>
<pre><code>package com.monkey1024.service.impl;

import com.monkey1024.service.StudentService;

public class StudentServiceImpl implements StudentService {

    @Override
    public void study() {
        System.out.println(&quot;好好学习天天向上&quot;);
    }
}</code></pre><p><strong>添加spring的配置文件</strong><br>在maven项目的resources目录下添加spring配置文件，文件名可以随意命名，这里命名为：applicationContext.xml<br>里面需要添加一些xsd，拷贝下面的即可。</p>
<pre><code>&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;
   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;

    &lt;bean id=&quot;studentService&quot; class=&quot;com.monkey1024.service.impl.StudentServiceImpl&quot;/&gt;


&lt;/beans&gt;</code></pre><p>在该spring配置文件中添加bean标签：</p>
<ul>
<li>id：该属性是Bean的唯一标识，java程序通过id访问该Bean。</li>
<li>class：指定该Bean所属的类，这里只能是类，不能是接口。</li>
</ul>
<p><strong>创建测试类进行测试</strong><br>想要使用StudentService的话，需要开发者自己手动通过new关键字创建该接口实现类的对象。虽然使用了接口可以实现程序的解耦，但是实际上在代码中还是有new StudentServiceImpl的语句，这个地方还是存在一些耦合的。</p>
<p>使用spring之后，在代码中通过spring获取StudentServiceImpl对象，这样子就去掉了之前代码中的耦合。</p>
<pre><code>package com.monkey1024.test;

import com.monkey1024.service.StudentService;
import com.monkey1024.service.impl.StudentServiceImpl;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
public class Test01 {
    /**
     * 以前的写法：手动创建对象
     */
    @Test
    public void oldType(){
        StudentService studentService = new StudentServiceImpl();
        studentService.study();
    }

    /**
     * 使用spring之后的写法：直接通过spring获取对象
     */
    @Test
    public void springType() {
        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);
        //从spring中获取对象
        StudentService studentService = (StudentService) context.getBean(&quot;studentService&quot;);
        studentService.study();
    }
}</code></pre>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>https://cosher.gitee.io/blog/2020/03/05/Spring/index/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h3 id="Spring-是于-2003-年兴起的一个轻量级的Java-开发框架，创始人是Rod-Johnson，它是为了解决企业应用开发的复杂性而创建的，随着时代的发展，spring旗下发展了很多项目-spring-mvc-spring-boot-spring-cloud-spring-data等等，这些项目使用方便，已经有越来越多的开发者开始使用这些项目。特别是在企业开发中，你可能不会用到其他框架，但是基本上99-都会用到spring，其提供的ioc和aop的实现方式已经成为业内经典的框架。"><a href="#Spring-是于-2003-年兴起的一个轻量级的Java-开发框架，创始人是Rod-Johnson，它是为了解决企业应用开发的复杂性而创建的，随着时代的发展，spring旗下发展了很多项目-spring-mvc-spring-boot-spring-cloud-spring-data等等，这些项目使用方便，已经有越来越多的开发者开始使用这些项目。特别是在企业开发中，你可能不会用到其他框架，但是基本上99-都会用到spring，其提供的ioc和aop的实现方式已经成为业内经典的框架。" class="headerlink" title="Spring 是于 2003 年兴起的一个轻量级的Java 开发框架，创始人是Rod Johnson，它是为了解决企业应用开发的复杂性而创建的，随着时代的发展，spring旗下发展了很多项目,spring mvc,spring boot,spring cloud, spring data等等，这些项目使用方便，已经有越来越多的开发者开始使用这些项目。特别是在企业开发中，你可能不会用到其他框架，但是基本上99%都会用到spring，其提供的ioc和aop的实现方式已经成为业内经典的框架。"></a>Spring 是于 2003 年兴起的一个轻量级的Java 开发框架，创始人是Rod Johnson，它是为了解决企业应用开发的复杂性而创建的<a id="more"></a>，随着时代的发展，spring旗下发展了很多项目,spring mvc,spring boot,spring cloud, spring data等等，这些项目使用方便，已经有越来越多的开发者开始使用这些项目。特别是在企业开发中，你可能不会用到其他框架，但是基本上99%都会用到spring，其提供的ioc和aop的实现方式已经成为业内经典的框架。</h3><h3 id="学习spring之前需要了解的设计模式："><a href="#学习spring之前需要了解的设计模式：" class="headerlink" title="学习spring之前需要了解的设计模式："></a>学习spring之前需要了解的设计模式：</h3><p><a href="">java代理模式静态代理和动态代理</a></p>
<p><a href="">三种工厂模式</a></p>
<ol>
<li><a href="./简介">spring简介</a></li>
<li><a href="#">spring中的ioc</a></li>
<li><a href="#">bean的装配</a></li>
<li><a href="#">spring的依赖注入</a></li>
<li><a href="#">spring中的AOP</a></li>
<li><a href="#">AspectJ对AOP的支持</a></li>
<li><a href="#">spring在web中的使用</a></li>
<li><a href="#">ssm（spring mvc+spring+mybatis）框架整合</a></li>
<li><a href="#">使用spring管理事务</a></li>
<li><a href="#">使用SSM框架组合实现增删改查的功能</a></li>
<li><a href="#">验证事务</a></li>
<li><a href="#">mybatis generator逆向工程生成代码</a></li>
</ol>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>后端框架</tag>
      </tags>
  </entry>
</search>
